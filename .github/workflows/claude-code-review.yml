name: claude

on:
  pull_request:
    types: [review_requested]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  review:
    runs-on: ubuntu-latest

    if: github.event.requested_reviewer.login == 'claude[bot]'

    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if Claude review is requested
        id: check-claude-requested
        run: |
          CLAUDE_REQUESTED=false

          # Check if this is a review request event
          if [[ "${{ github.event_name }}" == "pull_request_review_requested" ]]; then
            # Check if Claude (or claude bot) was requested as reviewer
            REQUESTED_REVIEWER="${{ github.event.requested_reviewer.login }}"
            if [[ "$REQUESTED_REVIEWER" == *"claude"* ]] || [[ "$REQUESTED_REVIEWER" == *"Claude"* ]]; then
              CLAUDE_REQUESTED=true
              echo "Claude was requested as reviewer: $REQUESTED_REVIEWER"
            fi
          fi

          # Check if this is a comment event with @claude mention
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            COMMENT_BODY="${{ github.event.comment.body }}"
            if [[ "$COMMENT_BODY" == *"@claude"* ]] || [[ "$COMMENT_BODY" == *"@Claude"* ]]; then
              CLAUDE_REQUESTED=true
              echo "Claude was mentioned in comment"
            fi
          fi

          # Check if PR title or description contains request for Claude
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_BODY="${{ github.event.pull_request.body }}"
            if [[ "$PR_TITLE" == *"@claude"* ]] || [[ "$PR_TITLE" == *"@Claude"* ]] || [[ "$PR_BODY" == *"@claude"* ]] || [[ "$PR_BODY" == *"@Claude"* ]]; then
              CLAUDE_REQUESTED=true
              echo "Claude was mentioned in PR title or description"
            fi
          fi

          if [[ "$CLAUDE_REQUESTED" == "true" ]]; then
            echo "claude_requested=true" >> $GITHUB_OUTPUT
            echo "Claude review requested - proceeding"
          else
            echo "claude_requested=false" >> $GITHUB_OUTPUT
            echo "Claude review not requested - skipping"
          fi

      - name: Check if most recent commit is from Claude
        id: check-author
        if: steps.check-claude-requested.outputs.claude_requested == 'true'
        run: |
          # Get the most recent actual commit (HEAD~1 to skip the merge commit)
          AUTHOR_EMAIL=$(git log --no-merges -1 --pretty=format:'%ae')
          AUTHOR_NAME=$(git log --no-merges -1 --pretty=format:'%an')
          COMMIT_TITLE=$(git log --no-merges -1 --pretty=format:'%s')

          echo "Most recent commit author: $AUTHOR_NAME <$AUTHOR_EMAIL>"
          echo "Most recent commit title: $COMMIT_TITLE"

          if [[ "$AUTHOR_EMAIL" == *"claude[bot]"* ]] || [[ "$AUTHOR_NAME" == *"claude[bot]"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping review - most recent commit is from Claude"
          elif [[ "$COMMIT_TITLE" == *"wip"* ]] || [[ "$COMMIT_TITLE" == *"WIP"* ]] || [[ "$COMMIT_TITLE" == "Merge"* ]] || [[ "$COMMIT_TITLE" == "chore"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping review - most recent commit title contains WIP"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Proceeding with review - most recent commit is not from Claude and doesn't contain WIP"
          fi

      - name: Check repository permissions
        id: check-permissions
        if: |
          steps.check-claude-requested.outputs.claude_requested == 'true' &&
          steps.check-author.outputs.skip != 'true' &&
          github.event.pull_request.user.login != 'dependabot[bot]' &&
          !contains(github.event.pull_request.title, 'WIP')
        run: |
          # Check if GITHUB_TOKEN has pull-requests write permission
          if [[ "${{ github.token }}" != "" && "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            # Token is available and PR is from the same repo (not a fork)
            echo "has_write_permission=true" >> $GITHUB_OUTPUT
            echo "Token has necessary permissions - proceeding with review"
          else
            # Token is missing or PR is from a fork (which restricts permissions)
            echo "has_write_permission=false" >> $GITHUB_OUTPUT
            echo "Token lacks necessary permissions - skipping review"
          fi

      - name: Run Claude Code Review
        id: claude-review
        if: |
          steps.check-claude-requested.outputs.claude_requested == 'true' &&
          steps.check-author.outputs.skip != 'true' &&
          github.event.pull_request.user.login != 'dependabot[bot]' &&
          !contains(github.event.pull_request.title, 'WIP') &&
          steps.check-permissions.outputs.has_write_permission == 'true'

        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.CLAUDE_CODE_API_KEY }}

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage

            Only comment when something is off, wrong, or could be improved; if a given implementation is already perfect do not comment on it.

            Remember the following:
            1. **Start a review**: Use `mcp__github__create_pending_pull_request_review` to begin a pending review
            2. **Get diff information**: Use `mcp__github__get_pull_request_diff` to understand the code changes and line numbers
            3. **Add inline comments**: Use `mcp__github__add_pull_request_review_comment_to_pending_review` for each specific piece of feedback on particular lines, including code change suggestions where appropriate
            4. **Submit the review**: Use `mcp__github__submit_pending_pull_request_review` with event type "COMMENT" (not "REQUEST_CHANGES") to publish all comments as a non-blocking review

            Provide specific, actionable feedback with inline comments for line-specific issues and include an overall summary when submitting the review.

            **Important**: Submit as "COMMENT" type so the review doesn't block the PR.

          allowed_tools: "Bash:*,Bash(*),Bash,Bash(sed:*),Bash(od:*),Bash(rg:*),Bash(pnpm format:*),Bash(pnpm build:*),Bash(pnpm push-dev:*),Bash(pnpm push-test:*),Bash(pnpm generate:*),Bash(pnpm test:*),Bash(pnpm push-test:*),Bash(pnpm run:*),Bash(pnpm -w run format),Bash(pnpm -w run test:e2e --run),WebFetch(domain:ai.google.dev),Bash(*),mcp__github__create_pending_pull_request_review,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request_diff"
